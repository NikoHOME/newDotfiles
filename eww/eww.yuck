

(defwidget bar-hoverbox []
  (box
    :class "bar-eventbox"
    (eventbox
      ; :onhover "scripts/delay_bar_open &" 
    )
    
  )
)


(defwindow bar-hoverbox
  :monitor 0
  :windowtype "dock"
  :stacking "fg"
  :geometry (geometry 
    :x "0%"
    :y "0%"
    :width "100%"
    :height "1px"
    :anchor "top center"
  )                   
  :reserve (struts 
    :side "top" 
    :distance "1px"
  )
  (bar-hoverbox)
)



(defvar lastHoverID 0)

; (defpoll mouse_position :interval "0.5s" "scripts/get_mouse_pos")
; (defpoll screen_height :interval "1m" "scripts/get_screen_height")
; (deflisten bar_hover :initial "0.00" "scripts/bar_reveal")
(defvar screen_height "1080")
(defvar bar_hover false)
(defvar bar_reveal false)
(defvar bar_reveal_keep true)

(defwidget bar []
  (eventbox
    ; :onhover "eww update bar_hover=true; scripts/delay_bar_open &" 
    ; :onhoverlost "eww update bar_hover=false; scripts/delay_bar_exit &"
    ;:class {(bar_reveal ? "main-bar" : "hide-bar" )}
    ; :class "main-bar"

    (revealer
      :transition "crossfade"
      :duration "400ms"
      :reveal {bar_reveal_keep ? true : bar_reveal}
      :hexpand false
      :vexpand false
      :class "main-bar transparent"
      (centerbox 
        :orientation "h"
        ;:space-evenly false
        ; :halign "middle"
        (box 
          :orientation "h"
          :hexpand false
          :vexpand false
          :halign "start"
          :class "main-bar-left"
          (workspaces)
        )
        (box
          :hexpand false
          :vexpand false
          :halign "middle"
          :class "main-bar-center"
          :width 220
        )
        (box 
          :orientation "h"
          :hexpand false
          :vexpand false
          :halign "end"
          :class "main-bar-right"
          (right)
        )
      )
    )
  )
)

(defwindow bar
  :monitor 0
  :windowtype "dock"
  :stacking "fg"
  :geometry (geometry 
    :x "0%"
    :y "1%"
    :width "99%"
    :height "30px"
    :anchor "top center"
  )                    
  ; :reserve (struts 
  ;   :side "top" 
  ;   :distance "6%"
  ; )
  (bar)
)

; (defwindow bar-background
;   :monitor 0
;   :windowtype "dock"
;   :stacking "fg"
;   :geometry (geometry 
;     :x "0%"
;     :y "1%"
;     :width "95%"
;     :height "30px"
;     :anchor "top center"
;   )                    
;   ; :reserve (struts 
;   ;   :side "top" 
;   ;   :distance "6%"
;   ; )
;   (bar-background)
; )

; (defwidget bar-background []
;   (revealer
;     :transition "crossfade"
;     :duration "400ms"
;     :reveal {bar_reveal}
;     :hexpand false
;     :vexpand false
    
;     (box 
;       :orientation "h"
;       :hexpand false
;       :vexpand false
;       :class "main-bar-background"
;     )
;   )
; )

    
(defwidget seperator []

  (label
    :class "seperator"
    :text ":"
  )
)


(defwidget right []
  (box 
    :class "right transparent"
    :orientation "h"
    :space-evenly false
    :spacing 10

    
    (volume_module)
    (seperator)
    (seperator)
    (wifi_module)
    (seperator)
    (battery_module)
    (battery_module)
    (disk_module)
    (ram_module)
    (seperator)
    (clock_module)
  )
)
    
(defvar has_battery true)

(defwidget battery_module []
  (box 
    :class "bat-module" 
    :vexpand "false" 
    :hexpand "false" 
    :visible {has_battery}
    (button 
        ; :limit-width 2
        :tooltip "battery on ${battery}%"
        :onclick "scripts/toggle_fade --system-on &"
        ; :show_truncated false
        ; :wrap false
    
      (metric-v 
        :label "ó°‚„ " ; 
        :value battery
        :onchange ""
      )
    )
  )
)


(defwidget disk_module []
  (box 
    :class "disk-module" 
    :vexpand "false" 
    :hexpand "false"  
    (button 
        :limit-width 2
        :tooltip "using ${round((1 - (EWW_DISK["/"].free / EWW_DISK["/"].total)) * 100, 0)}% disk space"
        :onclick "$HOME/.config/eww/bar/scripts/pop system"
        :show_truncated false
        :wrap false
        (metric-v 
          :label "ðŸ’¾ "
          :value {round((1 - (EWW_DISK["/"].free / EWW_DISK["/"].total)) * 100, 0)}
          :onchange ""
        )
      )
          
  )
)

(defpoll memory :initial "0" :interval "5s" "scripts/memory" )

(defwidget ram_module []
  (box 
    :class "ram-module" 
    :vexpand "false" 
    :hexpand "false" 
    (button 
        :limit-width 2
        :tooltip "using ${memory}% ram"
        :onclick "$HOME/.config/eww/bar/scripts/pop system"
        :show_truncated false
        :wrap false
        (metric-v 
          :label "ï‡€ "
          :value memory
          :onchange ""
        )
    )
  )
)

(defvar vol_reveal false)
(defpoll volume :initial "0" :interval "1s" "scripts/getvol")

(defwidget volume_module []
  (eventbox 
      :onhover "eww update vol_reveal=\"true\""
			:onhoverlost "eww update vol_reveal=\"false\""
      :tooltip "${volume}%"
      :class "volume-module"

    (box 
      :space-evenly "false" 
      :hexpand "false" 
      :vexpand true
      :orientation "h" 
      :spacing "3" 
      (button   
        :onclick "scripts/pop audio"  
        :wrap "false"  
        "ï€¨"
      )
      (revealer 
          :transition "slideleft"
          :reveal vol_reveal
          :duration "400ms"
        (metric
          :class "volbar"
          :value volume
          :orientation "h"
          
          :label ""
          :onchange "amixer sset Master {}%"
        )
      )
    )
  )
)

(defvar wifi_reveal false)

(defpoll COL_WLAN :interval "2s" "scripts/wifi --COL")
(defpoll ESSID_WLAN :interval "2s" "scripts/wifi --ESSID")
(defpoll WLAN_ICON :interval "2s" "scripts/wifi --ICON")

(defwidget wifi_module [] 
  (eventbox 
    :onhover "eww update wifi_reveal=\"true\""
		:onhoverlost "eww update wifi_reveal=\"false\""
    :onclick "scripts/network-dmenu"
    :class "module-wifi" 
		(box 
      :vexpand "false" 
      :hexpand "false" 
      :space-evenly "false"
			(button 
        :onclick "networkmanager_dmenu" 
        :wrap "false" 
        :style "color: ${COL_WLAN};" 
        WLAN_ICON
      )
      (revealer 
        :transition "slideright"
        :reveal wifi_reveal
        :duration "400ms"
        (label    
          :class "module_essid"
			    :text ESSID_WLAN
			  )
        
      )
    )
  )
)

(defwindow calendar
	:geometry (
      geometry :x "-20px" 
      :y "7%" 
      :anchor "top right"
      :width "270px" 
      :height "60px")
  (calendar_module)
)




(defvar time_reveal false)
(defpoll clock_time :interval "5m" "date +\%H")
(defpoll clock_minute :interval "5s" "date +\%M")
(defpoll clock_date :interval "10h" "date '+%b %d'")

(defwidget clock_module []
  (eventbox 
    :onhover "eww update time_reveal=\"true\""
    :onhoverlost "eww update time_reveal=\"false\""
    :class "time-module"
    (box 
      :class "module" 
      :space-evenly "false" 
      :orientation "h" 
      :spacing "3"
      
      (label :text clock_time :class "clock_time_class" )
      (label :text ":" :class "clock_time_sep" )
      (label :text clock_minute :class "clock_minute_class")
      (revealer 
        :transition "slideleft"
        :reveal time_reveal
        :duration "350ms"
        (button 
          :class "clock_date_class"
          :onclick "$HOME/.config/eww/bar/scripts/pop calendar" 
          clock_date 
        )
      )
    )
  )
)

(deflisten occupied_info :initial "0 1 2 3 4 5 6 7 8 9" "scripts/get_occupied_workspace" )
(deflisten current_info :initial "0" "scripts/get_current_workspace")

; (defvar workspace_color_0 "workspace_focussed")
; (defvar workspace_color_1 "workspace")
; (defvar workspace_color_2 "workspace")
; (defvar workspace_color_3 "workspace")
; (defvar workspace_color_4 "workspace")
; (defvar workspace_color_5 "workspace")
; (defvar workspace_color_6 "workspace")
; (defvar workspace_color_7 "workspace")
; (defvar workspace_color_8 "workspace")
; (defvar workspace_color_9 "workspace")


; (defwindow updater
;   :geometry (
;     geometry :x "-20px" 
;     :y "7%" 
;     :anchor "top right"
;     :width "270px" 
;     :height "60px")
;   (updater)
; )


; (defwidget updater []
;   (box
;     current_info
;     occupied_info
;   )
; )

(defwidget workspace_button [window_number]
  (button 
      :label {replace("number+", "number", window_number)}
      :onclick {replace ("bspc desktop \"number\" -f", "number", window_number)}
      :class 
        {(
          matches(
            occupied_info, replace("number+", "number", window_number)
          ) ? "workspace_occupied" : (current_info == window_number ? "workspace_current" : "workspace")
        )}
      {(matches(current_info, replace("number+", "number", window_number)) ? "ï†’" : "ï„‘")}
  )

)


(defwidget workspaces []
  (box 
    :class "workspaces"
    :orientation "h"
    :space-evenly true
    :halign "start"
    :spacing 10
    (workspace_button :window_number "0" );:window_color {workspace_color_0})
    (workspace_button :window_number "1" );:window_color {workspace_color_1})
    (workspace_button :window_number "2" );:window_color {workspace_color_2})
    (workspace_button :window_number "3" );:window_color {workspace_color_3})
    (workspace_button :window_number "4" );:window_color {workspace_color_4})
    (workspace_button :window_number "5" );:window_color {workspace_color_5})
    (workspace_button :window_number "6" );:window_color {workspace_color_6})
    (workspace_button :window_number "7" );:window_color {workspace_color_7})
    (workspace_button :window_number "8" );:window_color {workspace_color_8})
    (workspace_button :window_number "9" );:window_color {workspace_color_9})
  )
)



(defwidget metric [label value onchange]
  (box :orientation "h"
      :class "metric"
      :space-evenly false
    (box :class "label" label)
    (scale :min 0
      :max 101
      :active {onchange != ""}
      :value value
      :onchange onchange
    )
  )
)

(defwidget metric-v [label value onchange]
  (box :orientation "h"
    :class "metric-v"
    :space-evenly false
    :vexpand false
    :hexpand false
    (box :class "label" label)
    (scale 
      :min 0
      :max 101
      :active {onchange != ""}
      :value value
      :orientation "v"
      :flipped true
      :onchange onchange
      :vexpand false
      :hexpand false
    )
  )
)





(defwindow system
	:geometry (geometry 
    :x "-20px" 
    :y "7%" 
    :anchor "top right"
    :width "290px"
  )
  :stacking "overlay"
  (system)
)

(defpoll battery :initial "0" :interval "15s" "scripts/battery --bat")
(defpoll battery_status :initial "0" :interval "1m" "scripts/battery --bat-st")
(defwindow bar
  :monitor 0
  :windowtype "dock"
  :geometry (geometry 
    :x "0%"
    :y "1%"
    :width "95%"
    :height "30px"
    :anchor "top center"
  )                    
  :reserve (struts 
    :side "top" 
    :distance "6%"
  )
  (bar)
)
